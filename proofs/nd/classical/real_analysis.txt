
(*/chapter Real analysis *)

(*/section Archimedean property *)

is_sup_unfold. ⊢ is_sup s A → upper_bound s A ∧
  (∀b. b ∈ ℝ → upper_bound b A → s ≤ b), bij_eliml is_sup_equi.

01. 1 ⊢ upper_bound b A, hypo.
02. 2 ⊢ x ∈ A, hypo.
03. 1 ⊢ ∀x. x ∈ A → x ≤ b, lsubj_elim upper_bound_equi 1.
04. 1, 2 ⊢ x ≤ b, uq_bounded_elim 3 2.
upper_bound_elim. ⊢ upper_bound b A → x ∈ A → x ≤ b,
  subj_intro_ii 4.

01. 1 ⊢ ∃b. b ∈ ℝ ∧ upper_bound b ℕ, hypo.
02. ⊢ ℕ ⊆ ℝ, nat_incl_in_real.
03. ⊢ 0 ∈ ℕ, zero_in_nat.
04. ⊢ ¬ℕ = ∅, non_empty_from_witness 3.
05. 1 ⊢ ∃s. s ∈ ℝ ∧ is_sup s ℕ, lub_property 2 4 1.
06. 6 ⊢ s ∈ ℝ ∧ is_sup s ℕ, hypo.
07. 6 ⊢ s ∈ ℝ, conj_eliml 6.
08. 6 ⊢ is_sup s ℕ, conj_elimr 6.
09. 6 ⊢ upper_bound s ℕ ∧
  (∀b. b ∈ ℝ → upper_bound b ℕ → s ≤ b), is_sup_unfold 8.
10. 6 ⊢ upper_bound s ℕ, conj_eliml 9.
11. 6 ⊢ ∀b. b ∈ ℝ → upper_bound b ℕ → s ≤ b, conj_elimr 9.
12. 6 ⊢ s - 1 < s, rlt_sub_one 7.
13. 13 ⊢ upper_bound (s - 1) ℕ, hypo.
14. ⊢ 1 ∈ ℝ, calc.
15. 6 ⊢ s - 1 ∈ ℝ, rsub_closed 7 14.
16. 6 ⊢ upper_bound (s - 1) ℕ → s ≤ s - 1,
  uq_bounded_elim 11 15.
17. 6, 13 ⊢ s ≤ s - 1, subj_elim 16 13.
18. 6, 13 ⊢ s < s, rle_lt_trans 7 15 7 17 12.
19. ⊢ ¬(s < s), lt_irrefl.
20. 6, 13 ⊢ ⊥, neg_elim 19 18.
21. 6 ⊢ ¬upper_bound (s - 1) ℕ, neg_intro 20.
22. ⊢ upper_bound (s - 1) ℕ ↔ ∀x. x ∈ ℕ → x ≤ s - 1,
  upper_bound_equi.
23. ⊢ ¬upper_bound (s - 1) ℕ ↔ ¬∀x. x ∈ ℕ → x ≤ s - 1,
  equi_cong_neg 22.
24. 6 ⊢ ¬∀x. x ∈ ℕ → x ≤ s - 1, lsubj_elim 23 21.
25. 6 ⊢ ∃x. x ∈ ℕ ∧ ¬(x ≤ s - 1), neg_uq_bounded 24.
26. 26 ⊢ m ∈ ℕ ∧ ¬(m ≤ s - 1), hypo.
27. 26 ⊢ m ∈ ℕ, conj_eliml 26.
28. 26 ⊢ ¬(m ≤ s - 1), conj_elimr 26.
29. 26 ⊢ m ∈ ℝ, incl_elim nat_incl_in_real 27.
30. 6, 26 ⊢ s - 1 < m, rle_neg 29 15 28.
31. ⊢ 1 ∈ ℝ, calc.
32. 6, 26 ⊢ s - 1 + 1 < m + 1, rlt_compat_add 15 29 31 30.
33. 6 ⊢ s - 1 + 1 = s, rsub_cancel 7 31.
34. 6 ⊢ s = s - 1 + 1, eq_symm 33.
35. 6, 26 ⊢ s < m + 1, eq_lt_trans 34 32.
36. 26 ⊢ m + 1 ∈ ℕ, succ_in_nat 27.
37. 26 ⊢ m + 1 ∈ ℝ, incl_elim nat_incl_in_real 36.
38. 6, 26 ⊢ m + 1 ≤ s, upper_bound_elim 10 36.
39. 6, 26 ⊢ s < s, rlt_le_trans 7 37 7 35 38.
40. 6, 26 ⊢ ⊥, neg_elim 19 39.
41. 6 ⊢ ⊥, ex_elim 25 40.
42. 1 ⊢ ⊥, ex_elim 5 41.
nat_unbounded. ⊢ ¬(∃b. b ∈ ℝ ∧ upper_bound b ℕ),
  neg_intro 42.

01. ⊢ ¬(∃x. x ∈ ℝ ∧ upper_bound x ℕ), nat_unbounded.
02. ⊢ ∀x. x ∈ ℝ → ¬upper_bound x ℕ, neg_ex_bounded 1.
03. 3 ⊢ x ∈ ℝ, hypo.
04. 3 ⊢ ¬upper_bound x ℕ, uq_bounded_elim 2 3.
05. ⊢ upper_bound x ℕ ↔ ∀n. n ∈ ℕ → n ≤ x, upper_bound_equi.
06. ⊢ ¬upper_bound x ℕ ↔ ¬∀n. n ∈ ℕ → n ≤ x, equi_cong_neg 5.
07. 3 ⊢ ¬∀n. n ∈ ℕ → n ≤ x, lsubj_elim 6 4.
08. 3 ⊢ ∃n. n ∈ ℕ ∧ ¬(n ≤ x), neg_uq_bounded 7.
09. 9 ⊢ n ∈ ℕ ∧ ¬(n ≤ x), hypo.
10. 9 ⊢ n ∈ ℕ, conj_eliml 9.
11. 9 ⊢ n ∈ ℝ, incl_elim nat_incl_in_real 10.
12. 9 ⊢ ¬(n ≤ x), conj_elimr 9.
13. 3, 9 ⊢ x < n, rle_neg 11 3 12.
14. 3, 9 ⊢ n ∈ ℕ ∧ x < n, conj_intro 10 13.
15. 3, 9 ⊢ ∃n. n ∈ ℕ ∧ x < n, ex_intro 14.
16. 3 ⊢ ∃n. n ∈ ℕ ∧ x < n, ex_elim 8 15.
Archimedean_property. ⊢ x ∈ ℝ → ∃n. n ∈ ℕ ∧ x < n,
  subj_intro 16.

01. 1 ⊢ x ∈ ℝ, hypo.
02. 2 ⊢ y ∈ ℝ, hypo.
03. 3 ⊢ 0 < x, hypo.
04. 3 ⊢ ¬(0 = x), neq_from_lt 3.
05. 3 ⊢ ¬(x = 0), neq_symm 4.
06. 1, 2, 3 ⊢ y/x ∈ ℝ, rdiv_closed 2 1 5.
07. 1, 2, 3 ⊢ ∃n. n ∈ ℕ ∧ y/x < n,
  Archimedean_property 6.
08. 8 ⊢ n ∈ ℕ ∧ y/x < n, hypo.
09. 8 ⊢ n ∈ ℕ, conj_eliml 8.
10. 8 ⊢ n ∈ ℝ, incl_elim nat_incl_in_real 9.
11. 8 ⊢ y/x < n, conj_elimr 8.
12. 1, 2, 3, 8 ⊢ (y/x)⋅x < n⋅x,
  rlt_compat_mulr 6 10 1 11 3.
13. 1, 2, 3 ⊢ (y/x)⋅x = y, rdiv_cancel 2 1 5.
14. 1, 2, 3 ⊢ y = (y/x)⋅x, eq_symm 13.
15. 1, 2, 3, 8 ⊢ y < n⋅x, eq_lt_trans 14 12.
16. 1, 2, 3, 8 ⊢ n ∈ ℕ ∧ y < n⋅x, conj_intro 9 15.
17. 1, 2, 3, 8 ⊢ ∃n. n ∈ ℕ ∧ y < n⋅x, ex_intro 16.
18. 1, 2, 3 ⊢ ∃n. n ∈ ℕ ∧ y < n⋅x, ex_elim 7 17.
Archimedean_property_corollary. ⊢ x ∈ ℝ → y ∈ ℝ →
  0 < x → ∃n. n ∈ ℕ ∧ y < n⋅x, subj_intro_iii 18.

01. 1 ⊢ ε ∈ ℝ, hypo.
02. 2 ⊢ 0 < ε, hypo.
03. ⊢ 1 ∈ ℝ, calc.
04. 1, 2 ⊢ ∃n. n ∈ ℕ ∧ 1 < n⋅ε,
  Archimedean_property_corollary 1 3 2.
05. 5 ⊢ n ∈ ℕ ∧ 1 < n⋅ε, hypo.
06. 5 ⊢ n ∈ ℕ, conj_eliml 5.
07. 5 ⊢ 1 < n⋅ε, conj_elimr 5.
08. 5 ⊢ n ∈ ℝ, incl_elim nat_incl_in_real 6.
09. 1, 5 ⊢ n⋅ε = ε⋅n, rmul_comm 8 1.
10. 1, 5 ⊢ 1 < ε⋅n, lt_eq_trans 7 9.
11. 1, 5 ⊢ ε⋅n ∈ ℝ, rmul_closed 1 8.
12. ⊢ 0 ∈ ℝ, calc.
13. ⊢ 0 < 1, calc.
14. 1, 5 ⊢ 0 < ε⋅n, rlt_trans 12 3 11 13 10.
15. 1, 2, 5 ⊢ 0 < n, rmul_positive_lr 1 8 2 14.
16. 1, 2, 5 ⊢ 1/n < ε⋅n/n, rlt_compat_div 3 11 8 10 15.
17. 1, 2, 5 ⊢ ¬(0 = n), neq_from_lt 15.
18. 1, 2, 5 ⊢ ¬(n = 0), neq_symm 17.
19. 1, 2, 5 ⊢ ε⋅n/n = ε, rmul_cancel 1 8 18.
20. 1, 2, 5 ⊢ 1/n < ε, lt_eq_trans 16 19.
21. 1, 2, 5 ⊢ n ∈ ℕ ∧ 0 < n, conj_intro 6 15.
22. 1, 2, 5 ⊢ n ∈ ℕ ∧ 0 < n ∧ 1/n < ε, conj_intro 21 20.
23. 1, 2, 5 ⊢ ∃n. n ∈ ℕ ∧ 0 < n ∧ 1/n < ε, ex_intro 22.
24. 1, 2 ⊢ ∃n. n ∈ ℕ ∧ 0 < n ∧ 1/n < ε, ex_elim 4 23.
Archimedean_property_corollary_ii. ⊢ ε ∈ ℝ → 0 < ε →
  ∃n. n ∈ ℕ ∧ 0 < n ∧ 1/n < ε, subj_intro_ii 24.

01. 1 ⊢ a ∈ ℝ, hypo.
02. 2 ⊢ 0 ≤ a, hypo.
03. 3 ⊢ ∀n. n ∈ ℕ ∧ 0 < n → a ≤ 1/n, hypo.
04. 1 ⊢ 0 < a → ∃n. n ∈ ℕ ∧ 0 < n ∧ 1/n < a,
  Archimedean_property_corollary_ii 1.
05. 1 ⊢ ¬(∃n. n ∈ ℕ ∧ 0 < n ∧ 1/n < a) → ¬0 < a,
  contraposition 4.
06. ⊢ (∀n. n ∈ ℕ ∧ 0 < n → ¬1/n < a) →
  ¬∃n. n ∈ ℕ ∧ 0 < n ∧ 1/n < a, neg_ex_bounded_rev.
07. 1 ⊢ (∀n. n ∈ ℕ ∧ 0 < n → ¬1/n < a) → ¬0 < a,
  hypothetical_syllogism 6 5.
08. 8 ⊢ n ∈ ℕ ∧ 0 < n, hypo.
09. 8 ⊢ n ∈ ℕ, conj_eliml 8.
10. 8 ⊢ n ∈ ℝ, incl_elim nat_incl_in_real 9.
11. 8 ⊢ 0 < n, conj_elimr 8.
12. 8 ⊢ ¬(0 = n), neq_from_lt 11.
13. 8 ⊢ ¬(n = 0), neq_symm 12.
14. 8 ⊢ 1/n ∈ ℝ, rreci_closed 10 13.
15. 3, 8 ⊢ a ≤ 1/n, uq_bounded_elim 3 8.
16. 16 ⊢ 1/n < a, hypo.
17. 1, 3, 8, 16 ⊢ a < a, rle_lt_trans 1 14 1 15 16.
18. ⊢ ¬(a < a), lt_irrefl.
19. 1, 3, 8, 16 ⊢ ⊥, neg_elim 18 17.
20. 1, 3, 8 ⊢ ¬1/n < a, neg_intro 19.
21. 1, 3 ⊢ n ∈ ℕ ∧ 0 < n → ¬1/n < a, subj_intro 20.
22. 1, 3 ⊢ ∀n. n ∈ ℕ ∧ 0 < n → ¬1/n < a, uq_intro 21.
23. 1, 3 ⊢ ¬0 < a, subj_elim 7 22.
24. ⊢ 0 ∈ ℝ, calc.
25. 1, 3 ⊢ a ≤ 0, rlt_neg 24 1 23.
26. 1, 2, 3 ⊢ a = 0, rle_antisym 1 24 25 2.
Archimedean_property_corollary_iii. ⊢ a ∈ ℝ → 0 ≤ a →
  (∀n. n ∈ ℕ ∧ 0 < n → a ≤ 1/n) → a = 0,
  subj_intro_iii 26.

(*/section Convergent sequences *)

converges_equi. ⊢ converges a L ↔ ∀ε. ε ∈ ℝ → 0 < ε →
  ∃n0. n0 ∈ ℕ ∧ ∀n. n ∈ ℕ → n0 ≤ n → abs(app a n - L) < ε, def.

converges_fold. ⊢ (∀ε. ε ∈ ℝ → 0 < ε →
  ∃n0. n0 ∈ ℕ ∧ ∀n. n ∈ ℕ → n0 ≤ n → abs(app a n - L) < ε) →
  converges a L, bij_elimr converges_equi.

01. 1 ⊢ converges a L, hypo.
02. 1 ⊢ ∀ε. ε ∈ ℝ → 0 < ε → ∃n0. n0 ∈ ℕ ∧
  ∀n. n ∈ ℕ → n0 ≤ n → abs(app a n - L) < ε,
  lsubj_elim converges_equi 1.
03. 1 ⊢ ε ∈ ℝ → 0 < ε → ∃n0. n0 ∈ ℕ ∧
  ∀n. n ∈ ℕ → n0 ≤ n → abs(app a n - L) < ε, uq_elim 2.
converges_elim. ⊢ converges a L → ε ∈ ℝ → 0 < ε →
  ∃n0. n0 ∈ ℕ ∧ ∀n. n ∈ ℕ → n0 ≤ n → abs(app a n - L) < ε,
  subj_intro 3.

01. 1 ⊢ c ∈ ℝ, hypo.
02. 2 ⊢ ∀n. n ∈ ℕ → app a n = c, hypo.
03. 3 ⊢ ε ∈ ℝ, hypo.
04. 4 ⊢ 0 < ε, hypo.
05. 5 ⊢ n ∈ ℕ, hypo.
06. 6 ⊢ 0 ≤ n, hypo.
07. 1 ⊢ c - c = 0, rsub_self 1.
08. 2, 5 ⊢ app a n = c, uq_bounded_elim 2 5.
09. 1, 2, 5 ⊢ app a n - c = 0,
  eq_subst_rev 8 7, P t ↔ t - c = 0.
10. 1, 2, 5 ⊢ abs(app a n - c) = abs 0,
  eq_cong 9, f t = abs t.
11. ⊢ 0 ∈ ℝ, calc.
12. ⊢ 0 ≤ 0, calc.
13. ⊢ abs 0 = 0, rabs_eql 11 12.
14. 1, 2, 5 ⊢ abs(app a n - c) = 0, eq_trans 10 13.
15. 1, 2, 4, 5 ⊢ abs(app a n - c) < ε, eq_lt_trans 14 4.
16. 1, 2, 4, 5, 6 ⊢ abs(app a n - c) < ε, wk 15.
17. 1, 2, 4 ⊢ n ∈ ℕ → 0 ≤ n →
  abs(app a n - c) < ε, subj_intro_ii 16.
18. 1, 2, 4 ⊢ ∀n. n ∈ ℕ → 0 ≤ n →
  abs(app a n - c) < ε, uq_intro 17.
19. 1, 2, 4 ⊢ 0 ∈ ℕ ∧ ∀n. n ∈ ℕ → 0 ≤ n →
  abs(app a n - c) < ε, conj_intro zero_in_nat 18.
20. 1, 2, 4 ⊢ ∃n0. n0 ∈ ℕ ∧
  ∀n. n ∈ ℕ → n0 ≤ n → abs(app a n - c) < ε, ex_intro 19.
21. 1, 2 ⊢ 0 < ε → ∃n0. n0 ∈ ℕ ∧
  ∀n. n ∈ ℕ → n0 ≤ n → abs(app a n - c) < ε, subj_intro 20.
22. 1, 2, 3 ⊢ 0 < ε → ∃n0. n0 ∈ ℕ ∧
  ∀n. n ∈ ℕ → n0 ≤ n → abs(app a n - c) < ε, wk 21.
23. 1, 2 ⊢ ε ∈ ℝ → 0 < ε → ∃n0. n0 ∈ ℕ ∧
  ∀n. n ∈ ℕ → n0 ≤ n → abs(app a n - c) < ε, subj_intro 22.
24. 1, 2 ⊢ ∀ε. ε ∈ ℝ → 0 < ε → ∃n0. n0 ∈ ℕ ∧
  ∀n. n ∈ ℕ → n0 ≤ n → abs(app a n - c) < ε, uq_intro 23.
25. 1, 2 ⊢ converges a c, converges_fold 24.
const_converges. ⊢ c ∈ ℝ → (∀n. n ∈ ℕ → app a n = c) →
  converges a c, subj_intro_ii 25.

01. 1 ⊢ r ∈ ℝ, hypo.
02. 2 ⊢ L ∈ ℝ, hypo.
03. 3 ⊢ map a ℕ ℝ, hypo.
04. 4 ⊢ converges a L, hypo.
05. 5 ⊢ ∀n. n ∈ ℕ → app b n = r⋅(app a n), hypo.
06. 6 ⊢ ε ∈ ℝ, hypo.
07. 7 ⊢ 0 < ε, hypo.
08. 8 ⊢ n ∈ ℕ, hypo.
09. 9 ⊢ n0 ≤ n, hypo.
10. ⊢ r = 0 ∨ ¬(r = 0), lem.

11. 11 ⊢ r = 0, hypo.
12. 3, 8 ⊢ app a n ∈ ℝ, map_app_in_cod 3 8.
13. 3, 8 ⊢ 0⋅(app a n) = 0, rmul_lzero 12.
14. 3, 11, 8 ⊢ r⋅(app a n) = 0,
  eq_subst_rev 11 13, P t ↔ t⋅(app a n) = 0.
15. 5, 8 ⊢ app b n = r⋅(app a n), uq_bounded_elim 5 8.
16. 3, 5, 11, 8 ⊢ app b n = 0, eq_trans 15 14.
17. 3, 5, 11 ⊢ n ∈ ℕ → app b n = 0, subj_intro 16.
18. 3, 5, 11 ⊢ ∀n. n ∈ ℕ → app b n = 0, uq_intro 17.
19. ⊢ 0 ∈ ℝ, calc.
20. 3, 5, 11 ⊢ converges b 0, const_converges 19 18.
21. 2 ⊢ 0⋅L = 0, rmul_lzero 2.
22. 2, 11 ⊢ r⋅L = 0, eq_subst_rev 11 21, P t ↔ t⋅L = 0.
23. 2, 3, 5, 11 ⊢ converges b (r⋅L),
  eq_subst_rev 22 20, P t ↔ converges b t.

24. 24 ⊢ ¬(r = 0), hypo.
25. 25 ⊢ abs r = 0, hypo.
26. 1, 25 ⊢ r = 0, rabs_definiteness 1 25.
27. 1, 24, 25 ⊢ ⊥, neg_elim 24 26.
28. 1, 24 ⊢ ¬(abs r = 0), neg_intro 27.
29. 1, 24 ⊢ ¬(0 = abs r), neq_symm 28.
30. 1 ⊢ 0 ≤ abs r, rabs_is_non_negative 1.
31. 1, 24 ⊢ 0 < abs r, lt_intro 30 29.
32. 1 ⊢ abs r ∈ ℝ, rabs_closed 1.
33. 1, 6, 24 ⊢ ε/(abs r) ∈ ℝ, rdiv_closed_positive 6 32 31.
34. 1, 6, 7, 24 ⊢ 0 < ε/(abs r), rdiv_positive 6 32 7 31.
35. 1, 4, 6, 7, 24 ⊢ ∃n0. n0 ∈ ℕ ∧ ∀n. n ∈ ℕ → n0 ≤ n →
  abs(app a n - L) < ε/(abs r), converges_elim 4 33 34.
36. 36 ⊢ n0 ∈ ℕ ∧ ∀n. n ∈ ℕ → n0 ≤ n →
  abs(app a n - L) < ε/(abs r), hypo.
37. 36 ⊢ n0 ∈ ℕ, conj_eliml 36.
38. 36 ⊢ ∀n. n ∈ ℕ → n0 ≤ n →
  abs(app a n - L) < ε/(abs r), conj_elimr 36.
39. 8, 36 ⊢ n0 ≤ n → abs(app a n - L) < ε/(abs r),
  uq_bounded_elim 38 8.
40. 8, 9, 36 ⊢ abs(app a n - L) < ε/(abs r), subj_elim 39 9.
41. 2, 3, 8 ⊢ app a n - L ∈ ℝ, rsub_closed 12 2.
42. 2, 3, 8 ⊢ abs(app a n - L) ∈ ℝ, rabs_closed 41.
43. 1, 2, 3, 6, 8, 9, 24, 36 ⊢
  (abs r)⋅abs(app a n - L) < (abs r)⋅(ε/(abs r)),
  rlt_compat_mull 42 33 32 40 31.
44. 1, 2, 3, 8 ⊢ abs(r⋅(app a n - L)) = (abs r)⋅abs(app a n - L),
  rabs_dist_mul 1 41.
45. 1, 2, 3, 8 ⊢ r⋅(app a n - L) = r⋅app a n - r⋅L,
  rmul_distl_sub 1 12 2.
46. 1, 2, 3, 8 ⊢ abs(r⋅(app a n - L)) = abs(r⋅app a n - r⋅L),
  eq_cong 45, f t = abs t.
47. 1, 2, 3, 8 ⊢ abs(r⋅app a n - r⋅L) = (abs r)⋅abs(app a n - L),
  eq_trans_ll 46 44.
48. 1, 2, 3, 5, 8 ⊢ abs(app b n - r⋅L) = (abs r)⋅abs(app a n - L),
  eq_subst_rev 15 47, P t ↔ abs(t - r⋅L) = (abs r)⋅abs(app a n - L).
49. 1, 2, 3, 5, 6, 8, 9, 24, 36 ⊢
  abs(app b n - r⋅L) < (abs r)⋅(ε/(abs r)),
  eq_lt_trans 48 43.
50. 1, 6, 24 ⊢ (abs r)⋅(ε/(abs r)) = ε/(abs r)⋅(abs r),
  rmul_comm 32 33.
51. 1, 6, 24 ⊢ ε/(abs r)⋅(abs r) = ε, rdiv_cancel 6 32 28.
52. 1, 6, 24 ⊢ (abs r)⋅(ε/(abs r)) = ε, eq_trans 50 51.
53. 1, 2, 3, 5, 24, 36, 6, 8, 9 ⊢
  abs(app b n - r⋅L) < ε, lt_eq_trans 49 52.
54. 1, 2, 3, 5, 24, 36, 6 ⊢ n ∈ ℕ → n0 ≤ n →
  abs(app b n - r⋅L) < ε, subj_intro_ii 53.
55. 1, 2, 3, 5, 24, 36, 6 ⊢ ∀n. n ∈ ℕ →
  n0 ≤ n → abs(app b n - r⋅L) < ε, uq_intro 54.
56. 1, 2, 3, 5, 24, 36, 6 ⊢ n0 ∈ ℕ ∧ ∀n. n ∈ ℕ →
  n0 ≤ n → abs(app b n - r⋅L) < ε, conj_intro 37 55.
57. 1, 2, 3, 5, 24, 6, 36 ⊢ ∃n0. n0 ∈ ℕ ∧
  ∀n. n ∈ ℕ → n0 ≤ n → abs(app b n - r⋅L) < ε, ex_intro 56.
58. 1, 2, 3, 4, 5, 24, 6, 7 ⊢ ∃n0. n0 ∈ ℕ ∧
  ∀n. n ∈ ℕ → n0 ≤ n → abs(app b n - r⋅L) < ε, ex_elim 35 57.
59. 1, 2, 3, 4, 5, 24 ⊢ ε ∈ ℝ → 0 < ε → ∃n0. n0 ∈ ℕ ∧
  ∀n. n ∈ ℕ → n0 ≤ n → abs(app b n - r⋅L) < ε, subj_intro_ii 58.
60. 1, 2, 3, 4, 5, 24 ⊢ ∀ε. ε ∈ ℝ → 0 < ε → ∃n0. n0 ∈ ℕ ∧
  ∀n. n ∈ ℕ → n0 ≤ n → abs(app b n - r⋅L) < ε, uq_intro 59.
61. 1, 2, 3, 4, 5, 24 ⊢ converges b (r⋅L), converges_fold 60.

62. 1, 2, 3, 4, 5 ⊢ converges b (r⋅L), disj_elim 10 23 61.
63. 1, 2, 3, 4 ⊢ (∀n. n ∈ ℕ → app b n = r⋅(app a n)) →
  converges b (r⋅L), subj_intro 62.
converges_mul_const. ⊢ r ∈ ℝ → L ∈ ℝ → map a ℕ ℝ →
  converges a L → (∀n. n ∈ ℕ → app b n = r⋅(app a n)) →
  converges b (r⋅L), subj_intro_iv 63.


(*/note nat_unbounded
This theorem states that the set of natural numbers is unbounded
in the real numbers.<br>
<br>
<b>Proof idea</b><br>
Suppose ℕ is bounded. Then, according to [[lub_property]], ℕ would have
a [[is_sup_equi|supremum]]\_s. A number just before s is no longer an
upper bound, which means that there must occur a natural number m after
this number. Starting from m, we shift by adding a natural number, to
point beyond s, but this brings us back to ℕ, since ℕ is closed under
addition. Thus, the bound has been exceeded, which is absurd.<br>
<br>
<b>Proof sketch</b><br>
Suppose ℕ is bounded. Then, according to [[lub_property]], ℕ would have
a [[is_sup_equi|supremum]] s in ℝ. We play off against each other that
s is both an upper bound and the least upper bound. First, s\_−\_1
cannot be an upper bound, since it is smaller than the least upper
bound. Unfolding the definition of [[upper_bound_equi|upper_bound]],
this means ¬∀m\_∈\_ℕ. m\_≤\_s\_−\_1, which can be transformed to ∃m\_∈\_ℕ.
s\_−\_1\_<\_m. So there is an m\_∈\_ℕ with s\_−\_1\_<\_m, which can be
transformed to s\_<\_m\_+\_1. However, because m\_+\_1 ∈ ℕ, m\_+\_1 ≤ s
must hold, since s is an upper bound of ℕ. This leads to s\_<\_s, which
is absurd. Therefore, the assumption is false. q.e.d. *)

(*/note Archimedean_property
The Archimedean property states that every real number is exceeded by a
natural number. See also corollaries [[Archimedean_property_corollary|i]],
[[Archimedean_property_corollary_ii|ii]],
[[Archimedean_property_corollary_iii|iii]].<br>
<br>
<b>Proof idea</b><br>
An equivalent transformation of [[nat_unbounded]].<br>
<br>
<b>Proof sketch</b><br>
Let x ∈ ℝ be arbitrary. According to [[nat_unbounded]], ℕ is
unbounded, which means that ¬upper_bound\_x\_ℕ must hold. Unfolding the
definition of [[upper_bound_equi|upper_bound]], this means
¬∀n\_∈\_ℕ. n\_≤\_x, which can be transformed to ∃n\_∈\_ℕ. x\_<\_n.
q.e.d. *)

(*/note Archimedean_property_corollary
<b>Proof idea</b><br>
Obtained by applying the [[Archimedean_property|Archimedean property]]
to y/x.<br>
<br>
<b>Proof sketch</b><br>
Since x ≠ 0, the quotient y/x ∈ ℝ exists. Thus ∃n\_∈\_ℕ. y/x\_<\_n
from the [[Archimedean_property|Archimedean property]]. And since x is
positive, the inequality y/x\_<\_n can be transformed into y\_<\_n⋅x.
q.e.d. *)

(*/note Archimedean_property_corollary_ii
<b>Proof idea</b><br>
Obtained from [[Archimedean_property_corollary|corollary i]]
with x\_:=\_ε and y\_:=\_1 by transforming the inequality.<br>
<br>
<b>Proof sketch</b><br>
We specialise [[Archimedean_property_corollary|corollary i]] with
x\_:=\_ε and y\_:=\_1. So there is an n\_∈\_ℕ with 1\_<\_n⋅ε.
In particular, n⋅ε must then be positive, which means that n must also
be positive, since ε is positive. Thus we may transform the
inequality to 1/n\_<\_ε. q.e.d. *)

(*/note Archimedean_property_corollary_iii
<b>Proof idea</b><br>
In essence, this is merely the [[contraposition]] of
[[Archimedean_property_corollary_ii|corollary ii]].<br>
<br>
<b>Proof sketch</b><br>
Let a ∈ ℝ with 0 ≤ a be arbritary. We specialise
[[Archimedean_property_corollary_ii|corollary ii]] with ε\_:=\_a to
obtain<br>
\_\_0 < a → ∃n ∈ ℕ. 0 < n ∧ 1/n < a.<br>
So in contraposition,<br>
\_\_(∀n ∈ ℕ. 0 < n → a ≤ 1/n) → a ≤ 0.<br>
And since 0 ≤ a, the conclusion is equivalent to a = 0. q.e.d. *)

(*/note converges_equi A sequence a:\_ℕ\_→\_ℝ is said to <i>converge</i>
to the limit\_L if, for every positive\_ε, there exists an index
n<sub>0</sub> from which onwards all sequence values lie within the
ε-neighborhood of\_L. *)

(*/note const_converges
This theorem states that any sequence (a<sub>n</sub>) with
a<sub>n</sub>\_:=\_c [[converges_equi|converges]] to\_c. That is,
any constant sequence converges to its only value.<br>
<br>
<b>Proof idea</b><br>
We consider an arbitrary ε. Since the sequence (a<sub>n</sub>) stays
constant at the center\_c of the ε-neighborhood of\_c, it trivially does
not leave it.<br>
<br>
<b>Proof sketch</b><br>
Let ε > 0 be arbitrary. The inequality<br>
\_\_|a<sub>n</sub> − c| = |c − c| = 0 < ε<br>
trivially holds for every n, i.e., from the index n<sub>0</sub>\_:=\_0
onwards. Thus, this constant sequence (a<sub>n</sub>) must converge to
the limit\_c. q.e.d. *)
